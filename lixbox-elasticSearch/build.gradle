import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*
plugins {
    id 'com.bmuschko.docker-remote-api' version '9.4.0'
}
project(':lixbox-elasticSearch'){    
	dependencies {
        //lixbox
        api project(":lixbox-entity")
        api(group: 'fr.lixbox.lixbox-io', name: 'lixbox-json', version: version_lixbox_io) 
        
        
        //divers
        api group: 'org.hibernate.validator', name: 'hibernate-validator', version: version_hibernate_validator
        
        
        //elastic search
    	implementation group: 'co.elastic.clients', name: 'elasticsearch-java', version: '8.16.1'


        // ================================ Test ================================
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.11.3'
	}
    
    jar{
       manifest {
            attributes(
                "Implementation-Title": project.name, 
                "Implementation-Version": archiveVersion, 
                "Implementation-Timestamp": new Date()
            )
        }
    }
    
    eclipse{
        wtp{
            facet {
                facet name: 'jst.cdi', version: '2.0'
                facet name: 'jst.utility', version: '1.0'
            }
        }
    }
	
	sonarqube {
		properties {
           property "sonar.projectKey", "${config.desc_project.artefact.group}.${rootProject.name}:${project.name}"
           property "sonar.projectName", "${project.name}"
		   property "sonar.sources","src/main"
		   property "sonar.tests","src/test"
        }
	}	

    //initialisation du conteneur REDIS pour les tests
    task pullElasticSearchImage(type: DockerPullImage, description: "Pull elasticSearch image"){
       image='docker.elastic.co/elasticsearch/elasticsearch:7.17.10'
    }
    task removeElasticSearchContainer(type: DockerRemoveContainer, description: "Remove elasticSearch container"){
        targetContainerId 'lixbox_elasticSearch_test'
        onError { exception ->
            if (!(exception.message.contains('No such container')||exception.message.contains('is already in progress')))
                throw exception
        }
    }
    task createElasticSearchContainer(type: DockerCreateContainer, description: "Create a elasticSearch container for test") {
        targetImageId 'docker.elastic.co/elasticsearch/elasticsearch:7.17.10'
        containerName = 'lixbox_elasticSearch_test'
        hostConfig.autoRemove = true
        hostConfig.portBindings = ['9200:9200', '9300:9300']
        envVars = [ 'discovery.type':'single-node']
    }
    task startElasticSearchContainer(type: DockerStartContainer, group: "docker", description: "start elasticSearch container") {
        targetContainerId "lixbox_elasticSearch_test"
    }   
    task stopElasticSearchContainer(type: DockerStopContainer, group: "docker", description: "stop elasticSearch container") {
        targetContainerId "lixbox_elasticSearch_test"
        onError { exception ->
            if (!exception.message.contains('No such container'))
                throw exception
        }
    }
    tasks.clean.dependsOn(tasks.pullElasticSearchImage);
    tasks.createElasticSearchContainer.dependsOn(tasks.removeElasticSearchContainer);
    tasks.removeElasticSearchContainer.dependsOn(tasks.stopElasticSearchContainer);
    tasks.startElasticSearchContainer.dependsOn(tasks.createElasticSearchContainer);
    tasks.test.dependsOn(tasks.startElasticSearchContainer);
}