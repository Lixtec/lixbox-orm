import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*
plugins {
    id 'com.bmuschko.docker-remote-api' version '6.1.3'
}
project(':lixbox-redis'){    
	dependencies {
        //lixbox
        api project(":lixbox-entity")
        api(group: 'fr.lixbox.lixbox-io', name: 'lixbox-json', version: version_lixbox_io) 
        
        
        //redis
        api group: 'redis.clients', name: 'jedis', version: '3.4.1'
        api group: 'com.redislabs', name: 'jredisearch', version: '1.8.1'


        // ================================ Test ================================
        testImplementation group: 'junit', name:'junit', version: version_junit
	}
    
    jar{
       manifest {
            attributes(
                "Implementation-Title": project.name, 
                "Implementation-Version": archiveVersion, 
                "Implementation-Timestamp": new Date()
            )
        }
    }
    
    eclipse{
        wtp{
            facet {
                facet name: 'jst.cdi', version: '2.0'
                facet name: 'jst.utility', version: '1.0'
            }
        }
    }
	
	sonarqube {
		properties {
           property "sonar.projectKey", "${config.desc_project.artefact.group}.${rootProject.name}:${project.name}"
           property "sonar.projectName", "${project.name}"
		   property "sonar.sources","src/main"
		   property "sonar.tests","src/test"
        }
	}	

    //initialisation du conteneur REDIS pour les tests
    task pullRedisImage(type: DockerPullImage, description: "Pull redis image"){
       image='redislabs/redisearch:latest'
    }
    task removeRedisContainer(type: DockerRemoveContainer, description: "Remove redis container"){
        targetContainerId 'lixbox_redis_test'
        onError { exception ->
            if (!(exception.message.contains('No such container')||exception.message.contains('is already in progress')))
                throw exception
        }
    }
    task createRedisContainer(type: DockerCreateContainer, description: "Create a redis container for test") {
        targetImageId 'redislabs/redisearch:latest'
        containerName = 'lixbox_redis_test'
        hostConfig.autoRemove = true
        hostConfig.portBindings = ['6480:6379']
    }
    task startRedisContainer(type: DockerStartContainer, group: "docker", description: "start redis container") {
        targetContainerId "lixbox_redis_test"
    }   
    task stopRedisContainer(type: DockerStopContainer, group: "docker", description: "stop redis container") {
        targetContainerId "lixbox_redis_test"        
        onError { exception ->
            if (!exception.message.contains('No such container'))
                throw exception
        }
    }
    tasks.clean.dependsOn(tasks.pullRedisImage);
    tasks.createRedisContainer.dependsOn(tasks.removeRedisContainer);
    tasks.removeRedisContainer.dependsOn(tasks.stopRedisContainer);
    tasks.startRedisContainer.dependsOn(tasks.createRedisContainer);
    tasks.test.dependsOn(tasks.startRedisContainer);
}